package WFC_dungeon_gen.dao;

import WFC_dungeon_gen.domain.TileSet;
import com.google.gson.Gson;
import java.io.FileNotFoundException;

/**
 * TileSet dao implementation for hard coded test data.
 * @author Juha Kauppinen
 */
public class TileSetTestData implements TileSetDao {

    private final String trivial = "{"
            + "  \"tiles\": ["
            + "    ["
            + "      \".H.\","
            + "      \".H.\","
            + "      \".H.\""
            + "  ],"
            + "  ["
            + "      \"...\","
            + "      \"HHH\","
            + "      \"...\""
            + "  ],"
            + "  ["
            + "      \"...\","
            + "      \"HH.\","
            + "      \".H.\""
            + "  ],"
            + "  ["
            + "      \".H.\","
            + "      \".HH\","
            + "      \"...\""
            + "  ],"
            + "  ["
            + "      \".H.\","
            + "      \"HH.\","
            + "      \"...\""
            + "  ],"
            + "  ["
            + "      \"...\","
            + "      \".HH\","
            + "      \".H.\""
            + "  ],"
            + "  ["
            + "      \"HHH\","
            + "      \"HHH\","
            + "      \"HHH\""
            + "  ],"
            + "  ["
            + "      \"...\","
            + "      \"...\","
            + "      \"...\""
            + "  ],"
            + "  ["
            + "      \".H.\","
            + "      \"HHH\","
            + "      \".H.\""
            + "  ]"
            + "  ],"
            + "  \"allowedTilesUp\": ["
            + "    \"101001011\","
            + "    \"000000110\","
            + "    \"010110111\","
            + "    \"101001011\","
            + "    \"101001011\","
            + "    \"010110110\","
            + "    \"010110110\","
            + "    \"101001111\","
            + "    \"101001011\""
            + "  ],"
            + "  \"allowedTilesRight\": ["
            + "    \"000101110\","
            + "    \"011010011\","
            + "    \"100101111\","
            + "    \"011010011\","
            + "    \"100101110\","
            + "    \"011010011\","
            + "    \"100101110\","
            + "    \"011010111\","
            + "    \"011010011\""
            + "  ],"
            + "  \"allowedTilesDown\": ["
            + "    \"100110011\","
            + "    \"001001110\","
            + "    \"100110011\","
            + "    \"011001100\","
            + "    \"011001010\","
            + "    \"100110011\","
            + "    \"011001110\","
            + "    \"100110111\","
            + "    \"100110011\""
            + "  ],"
            + "  \"allowedTilesLeft\": ["
            + "    \"001010110\","
            + "    \"010101011\","
            + "    \"010101011\","
            + "    \"101010011\","
            + "    \"010101011\","
            + "    \"101010110\","
            + "    \"101010110\","
            + "    \"010101111\","
            + "    \"010101011\""
            + "  ],"
            + "  \"tileWeights\": ["
            + "    2,"
            + "    2,"
            + "    2,"
            + "    2,"
            + "    2,"
            + "    2,"
            + "    20,"
            + "    5,"
            + "    1"
            + "  ],"
            + " \"borderTiles\": ["
            + "    [6],"
            + "    [6],"
            + "    [6],"
            + "    [6]"
            + "  ]"
            + "}";

    private final String nonTrivial = "{"
            + "  \"tiles\": ["
            + "    ["
            + "      \".H.\","
            + "      \".H.\","
            + "      \".H.\""
            + "  ],"
            + "  ["
            + "      \"...\","
            + "      \"HHH\","
            + "      \"...\""
            + "  ],"
            + "  ["
            + "      \"...\","
            + "      \"HH.\","
            + "      \".H.\""
            + "  ],"
            + "  ["
            + "      \".H.\","
            + "      \".HH\","
            + "      \"...\""
            + "  ]"
            + "  ],"
            + "  \"allowedTilesUp\": ["
            + "    \"1010\","
            + "    \"0101\","
            + "    \"0101\","
            + "    \"1010\""
            + "  ],"
            + "  \"allowedTilesRight\": ["
            + "    \"1001\","
            + "    \"0110\","
            + "    \"1001\","
            + "    \"0110\""
            + "  ],"
            + "  \"allowedTilesDown\": ["
            + "    \"1001\","
            + "    \"0110\","
            + "    \"1001\","
            + "    \"0110\""
            + "  ],"
            + "  \"allowedTilesLeft\": ["
            + "    \"1010\","
            + "    \"0101\","
            + "    \"0101\","
            + "    \"1010\""
            + "  ],"
            + "  \"tileWeights\": ["
            + "    1,"
            + "    2,"
            + "    3,"
            + "    4"
            + "  ],"
            + " \"borderTiles\": ["
            + "    [0,1,2,3],"
            + "    [0,1,2,3],"
            + "    [0,1,2,3],"
            + "    [0,1,2,3]"
            + "  ]"
            + "}";

    /**
     * Returns one of the hard coded tilesets according to given input.
     * @param file String for selecting the dataset.
     * @return TileSet object.
     * @throws FileNotFoundException not valid here.
     */
    @Override
    public TileSet loadTileSet(String file) throws FileNotFoundException {
        String testData;

        if (file.equals("nontrivial")) {
            testData = nonTrivial;
        } else {
            testData = trivial;
        }
        Gson GSON = new Gson();
        TileSet tileSet = GSON.fromJson(testData, TileSet.class);

        return tileSet;
    }

}
